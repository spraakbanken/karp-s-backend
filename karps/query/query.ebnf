@@grammar::KarpQuery

start
    =
    expression $
    ;

expression
    =
    | logical_expression
    # to simplyfied reading the resulting AST, treat non-boolean top-level expressions as an and with a single clause
    | op:`and` args:{query_expression}+
    ;

query_expression
    =
    | text_arg_expr
    | any_arg_expr
    ;


text_arg_expr::TextArgExpression
    =
    op:text_value_op '|' field:identifier '|' arg:string_value
    ;

text_value_op
    =
    | 'contains'
    | 'endswith'
    | 'regexp'
    | 'startswith'
    ;

any_arg_expr::AnyArgExpression
    =
    op:any_arg_op '|' field:identifier '|' arg:any_value
    ;

any_arg_op
    =
    | 'equals'
    | 'gt'
    | 'gte'
    | 'lt'
    | 'lte'
    ;

logical_expression
    =
    | and
    | or
    ;

and::And
    =
    op:'and' '(' args:'||'.{query_expression}* ')'
    ;

or::Or
    =
    op:'or' '(' args:'||'.{query_expression}* ')'
    ;

any_value
    =
    | integer_value
    | string_value
    ;

string_value::StringValue =
    | unquoted_string_value
    | quoted_string_value
    ;

unquoted_string_value = @: /[^|)("]+/ ;

# any character should be allowed in strings, but " must be escaped
quoted_string_value::QuotedStringValue
    =
    '"' @: { /(?s)\s+/ | '\\"' | /[^"]/  } '"'
    ;

integer_value::int
    =
    /\d+$/
    ;

# for simplicity, add |,as not allowed here, even though it shouldn't matter. should be possible to name  field "myfield|"
identifier::Identifier = /[^|]+/ ;

